####################################
# Kage Park
# Re-designed(2017/09) by Kage Park
# Base design Using old xcat scripts(2011) of Kage
# License : GPL
####################################

node() {
    #Get a group name
    netboot_str="netboot=xnba"
    powerm_str="mgt=ipmi"
    arch_str="arch=x86_64"
    args=$@
    for ((ii=0; ii<${#args[@]}; ii++)); do
       tmp[0]=$(echo ${args[$ii]} | awk -F= '{print $1}')
       tmp[1]=$(echo ${args[$ii]} | awk -F= '{print $2}')
       if [ "${tmp[0]}" == "emac" ]; then
           mac_str="mac=${tmp[1]}"
       elif [ "${tmp[0]}" == "bip" ]; then
           bmcip_str="bmc=${tmp[1]}"
       elif [ "${tmp[0]}" == "buser" ]; then
           bmcuser_str="bmcusername=${tmp[1]}"
       elif [ "${tmp[0]}" == "bpass" ]; then
           bmcpass_str="bmcpassword=${tmp[1]}"
       elif [ "${tmp[0]}" == "image" ]; then
           image_str="provmethod=${tmp[1]}"
       elif [ "${tmp[0]}" == "arch" ]; then
           arch_str="arch=${tmp[1]}"
       elif [ "${tmp[0]}" == "netboot" ]; then
           netboot_str="netboot=${tmp[1]}"
       elif [ "${tmp[0]}" == "powermethod" ]; then
           powerm_str="mgt=${tmp[1]}"
       elif [ "${tmp[0]}" == "postboot" ]; then
           postboot_str="postbootscripts=${tmp[1]}"
       elif [ "${tmp[0]}" == "postscript" ]; then
           postscript_str="postscripts=${tmp[1]}"
       elif [ "${tmp[0]}" == "bootmode" ]; then
           bootmode="${tmp[1]}"
       elif [ "${tmp[0]}" == "alias" ]; then
           alias_str="hostnames=${tmp[1]}"
       elif [ "${tmp[0]}" == "kernel_arg" ]; then
           kernel_arg_str="addkcmdline=\"${tmp[1]}\""
       elif [ "${tmp[0]}" == "sol_port" ]; then
           sol_str="$sol_str serialport=${tmp[1]}"
       elif [ "${tmp[0]}" == "sol_speed" ]; then
           sol_str="$sol_str serialspeed=${tmp[1]}"
       elif [ "${tmp[0]}" == "sol_flow" ]; then
           sol_str="$sol_str serialflow=${tmp[1]}"
       elif [ "${tmp[0]}" == "clean" ]; then
           clean_str="status="
       fi
    done

#    if node_cnt=$(nodels $node 2>/dev/null | wc -l); then 
#       if [ "$node_cnt" == "1" ]; then
          chdef -t node $destname $arch_str $bmcip_str $bmcuser_str $bmcpass_str $mac_str $powerm_str $netboot_str $image_str $postboot_str $postscript_str $clean_str $alias_str $kernel_arg_str $sol_str || exit 1
          change_boot_mode=$(echo $(echo $(lsdef $destname -i currstate) | sed "s/Object name: /\n/g" | grep "currstate=boot" | awk '{print $1}') | sed "s/ /,/g")
          nodeset $destname osimage
          [ -n "$change_boot_mode" ] && nodeset $change_boot_mode boot 


#          # Need Check up the node is in the xCAT or not
#          osimage_str=$(lsdef $node | grep "provmethod=" | sed "s/provmethod=//g" | sed "s/ //g")
#          
#          if [ "$bootmode" == "install" ]; then
#             if [ -n "${image_str}" ]; then
#                osimage_str=$(echo $image_str | sed "s/provmethod=//g")
#             fi 
#             nodeset ${destname} osimage=$osimage_str
#          elif [ "$bootmode" == "boot" ]; then
#             nodeset ${destname} boot
#          else
#             lsdef $destname | grep "currstate=boot " >& /dev/null || nodeset ${node} osimage=$osimage_str
#          fi
#       else
#          echo "Looks $destname is not host name"
#       fi
#    else 
#       echo "$node not found"
#    fi
}

image() {
    args=$@
    for ((ii=0; ii<${#args[@]}; ii++)); do
       tmp[0]=$(echo ${args[$ii]} | awk -F= '{print $1}')
       tmp[1]=$(echo ${args[$ii]} | awk -F= '{print $2}')
       if [ "${tmp[0]}" == "pkglist" ]; then
          pkglist_str="pkglist=${tmp[1]}"
       elif [ "${tmp[0]}" == "synclists" ] ; then
          synclists_str="synclists=${tmp[1]}"
       elif [ "${tmp[0]}" == "otherpkglist" ] ; then
          otherpkglist_str="otherpkglist=${tmp[1]}"
       elif [ "${tmp[0]}" == "template" ] ; then
          template_str="template=${tmp[1]}"
       fi
    done
    chdef -t osimage ${destname} $pkglist_str $synclists_str $template_str $otherpkglist_str
}

change() {
    local hostname opt
    opt=($@)
    if (( ${#opt[@]} < 3 )); then
         echo "${FUNCNAME} <host|image> <name> <arg1=val1> ...." 
         echo "  host options: "
         echo "    emac=<eth0 mac>"
         echo "    bip=<bmc ip>"
         echo "    buser=<bmc_user>"
         echo "    bpass=<bmc pass>"
         echo "    powermethod=<default:ipmi>"
         echo "    netboot=<default:xnba>"
         echo "    postboot=<post boot scripts>"
         echo "    postscript=<post scripts>"
         echo "    bootmode=<install|boot>"
         echo "    alias=<add alias hostname to host>"
         echo "    kernel_arg=\"<kernel parameters>\""
         echo "    sol_port=<0|1|2|3>"
         echo "    sol_speed=<9600|19200|115200>"
         echo "    sol_flow=<none|hard>"
         echo "    <clean:state>"
         echo "  image options: "
         echo "    pkglist=<Package list file>"
         echo "    otherpkglist=<Other Package list file>"
         echo "    synclists=<Sync file list file>"
         echo "    template=<Install template file>"
         exit
    fi

    type=$1
    shift 1
    destname=$1
    shift 1
    if [ "$type" == "host" ]; then
        node $@
    elif [ "$type" == "image" ]; then
        image $@
    else
        echo "Unkown options"
    fi    
}
