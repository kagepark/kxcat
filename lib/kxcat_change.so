####################################
# License : GPL
####################################

node() {
    #Get a group name
    arch_str="arch=x86_64"
    args=("$@")
    chk_input=0
    for ((ii=0; ii<${#args[@]}; ii++)); do
       tmp[0]=$(echo ${args[$ii]} | awk -F= '{print $1}')
#       tmp[1]=$(echo ${args[$ii]} | awk -F= '{print $2}')
       tmp[1]=$(echo ${args[$ii]} | sed "s/^${tmp[0]}=//g")
       if [ "${tmp[0]}" == "emac" ]; then
           mac_str="mac=${tmp[1]}"
           chk_input=1
       elif [ "${tmp[0]}" == "bip" ]; then
           bmcip_str="bmc=${tmp[1]}"
           chk_input=1
       elif [ "${tmp[0]}" == "buser" ]; then
           bmcuser_str="bmcusername=${tmp[1]}"
           chk_input=1
       elif [ "${tmp[0]}" == "bpass" ]; then
           bmcpass_str="bmcpassword=${tmp[1]}"
           chk_input=1
       elif [ "${tmp[0]}" == "image" ]; then
           image_str="provmethod=${tmp[1]}"
           chk_input=1
       elif [ "${tmp[0]}" == "arch" ]; then
           arch_str="arch=${tmp[1]}"
           chk_input=1
       elif [ "${tmp[0]}" == "netboot" ]; then
           netboot_str="netboot=${tmp[1]}"
           [ -n "$netboot_str" ] || netboot_str="netboot=xnba"
           chk_input=1
       elif [ "${tmp[0]}" == "powermethod" ]; then
           powerm_str="mgt=${tmp[1]}"
           [ -n "$powerm_str" ] || powerm_str="mgt=ipmi"
           chk_input=1
       elif [ "${tmp[0]}" == "postboot" ]; then
           postboot_str="postbootscripts=${tmp[1]}"
           chk_input=1
       elif [ "${tmp[0]}" == "postscript" ]; then
           postscript_str="postscripts=${tmp[1]}"
           chk_input=1
       elif [ "${tmp[0]}" == "bootmode" ]; then
           bootmode="${tmp[1]}"
           chk_input=1
       elif [ "${tmp[0]}" == "alias" ]; then
           alias_str="hostnames=${tmp[1]}"
           chk_input=1
       elif [ "${tmp[0]}" == "kernel_arg" ]; then
           #kernel_arg_str="addkcmdline=\"${tmp[1]}\""
           kernel_arg_str="${tmp[1]}"
           chk_input=1
       elif [ "${tmp[0]}" == "sol_port" ]; then
           sol_str="$sol_str serialport=${tmp[1]}"
           chk_input=1
       elif [ "${tmp[0]}" == "sol_speed" ]; then
           sol_str="$sol_str serialspeed=${tmp[1]}"
           chk_input=1
       elif [ "${tmp[0]}" == "sol_flow" ]; then
           sol_str="$sol_str serialflow=${tmp[1]}"
           chk_input=1
       elif [ "${tmp[0]}" == "clean" ]; then
           clean_str="status="
           chk_input=1
       fi
    done

    [ "$chk_input" == "0" ] && error_exit "input parameter not found. please look \"$(basename $0) change\" for help"
    desthost=$(echo $destname|sed "s/ /,/g")

#    echo chdef -t node -o $desthost $arch_str $bmcip_str $bmcuser_str $bmcpass_str $mac_str $powerm_str $netboot_str $image_str $postboot_str $postscript_str $clean_str $alias_str $kernel_arg_str $sol_str 
    if [ -n "$kernel_arg_str" ]; then
       chdef -t node -o $desthost $arch_str $bmcip_str $bmcuser_str $bmcpass_str $mac_str $powerm_str $netboot_str $image_str $postboot_str $postscript_str $clean_str $alias_str addkcmdline="$kernel_arg_str" $sol_str || exit 1
    else
       chdef -t node -o $desthost $arch_str $bmcip_str $bmcuser_str $bmcpass_str $mac_str $powerm_str $netboot_str $image_str $postboot_str $postscript_str $clean_str $alias_str $sol_str || exit 1
    fi

    [ -n "$alias_str" ] && makehosts $desthost
    if [ "$bootmode" == "boot" ]; then
        nodeset $desthost boot
    elif [ "$bootmode" == "install" ]; then
        nodeset $desthost osimage
    else
        change_boot_mode=$(echo $(echo $(lsdef $desthost -i currstate) | sed "s/Object name: /\n/g" | grep "currstate=boot" | awk '{print $1}') | sed "s/ /,/g")
        nodeset $desthost osimage
        [ -n "$change_boot_mode" ] && nodeset $change_boot_mode boot 
    fi
}

image() {
    args=("$@")
    for ((ii=0; ii<${#args[@]}; ii++)); do
       tmp[0]=$(echo ${args[$ii]} | awk -F= '{print $1}')
       tmp[1]=$(echo ${args[$ii]} | awk -F= '{print $2}')
       if [ "${tmp[0]}" == "pkglist" ]; then
          pkglist_str="pkglist=${tmp[1]}"
       elif [ "${tmp[0]}" == "synclists" ] ; then
          synclists_str="synclists=${tmp[1]}"
       elif [ "${tmp[0]}" == "otherpkglist" ] ; then
          otherpkglist_str="otherpkglist=${tmp[1]}"
       elif [ "${tmp[0]}" == "otherpkgdir" ] ; then
          otherpkgdir_str="otherpkgdir=${tmp[1]}"
       elif [ "${tmp[0]}" == "template" ] ; then
          template_str="template=${tmp[1]}"
       fi
    done
    chdef -t osimage $(echo ${destname}|sed 's/ /,/g') $otherpkgdir_str $pkglist_str $synclists_str $template_str $otherpkglist_str
}

change() {
    local hostname opt
    opt=("$@")
    if (( ${#opt[@]} < 3 )); then
         echo "${FUNCNAME} <host|image> <name> <arg1=val1> ...." 
         echo "  host options: "
         echo "    emac=<eth0 mac>"
         echo "    bip=<bmc ip>"
         echo "    buser=<bmc_user>"
         echo "    bpass=<bmc pass>"
         echo "    powermethod=<default:ipmi>"
         echo "    netboot=<default:xnba|pxe>"
         echo "    postboot=<post boot scripts>"
         echo "    postscript=<post scripts>"
         echo "    bootmode=<install|boot>"
         echo "    alias=<add alias hostname to host>"
         echo "    kernel_arg=\"<kernel parameters>\""
         echo "    sol_port=<0|1|2|3>"
         echo "    sol_speed=<9600|19200|115200>"
         echo "    sol_flow=<none|hard>"
         echo "    clean : status remove"
         echo "  image options: "
         echo "    pkglist=<Package list file>"
         echo "    otherpkgdir=<Other Package file directory>"
         echo "    otherpkglist=<Other Package list file>"
         echo "    synclists=<Sync file list file>"
         echo "    template=<Install template file>"
         exit
    fi

    type=${opt[0]}
    unset opt[0]
    destname=${opt[1]}
    unset opt[1]
    if [ "$type" == "host" ]; then
        node "${opt[@]}"
    elif [ "$type" == "image" ]; then
        image "${opt[@]}"
    else
        echo "Unkown options"
    fi    
}
