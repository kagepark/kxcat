####################################
# Kage Park
# Re-designed(2017/09) by Kage Park
# Base design Using old xcat scripts(2011) of Kage
# License : GPL
####################################

get_freeip() {
    group_ips=()
    group_ips_str=""
    group_num=""
    for ii in $(tabdump hosts | grep -v "^#" | awk -F, '{if($2) print $2}'| sed "s/(((\$1\/256)\%256)//g" | sed "s/((\$1%256//g" |  sed -e "s/+//g" -e "s/)//g" | awk -F\| '{print $2}'); do
        group_ips_str="$group_ips_str
$(_k_net_str2ip $ii)"
    done
    group_ips=($(echo "$group_ips_str" | sort -n))
    for ((ii=0;ii<$((${#group_ips[*]}-1));ii++)); do
        if (( $(( ${group_ips[$ii+1]} - ${group_ips[$ii]} )) >= $(( $(( $MAX_NODES + 50 )) * 2 )) )); then
            group_num=$ii
            GROUP_START=$((${group_ips[$ii]} + $MAX_NODES + 50))
            break
        fi
    done

    if [ ! -n "$group_num" ]; then
        group_num=${#group_ips[*]}
        (($group_num > 0)) && GROUP_START=$((${group_ips[$((${#group_ips[*]}-1))]} + $MAX_NODES + 50)) || GROUP_START=100
    fi
    GROUP_START_1=$(($(($GROUP_START/256))%256))
    GROUP_START_2=$(($GROUP_START%256))
    BMC_NET_1=$(echo $BMC_NETWORK | awk -F. '{print $3}')

    (( $(( $(_k_net_str2ip $BMC_NETWORK) - $MAX_NODES + 200)) < $(( $(( $group_num * $MAX_NODES )) + $(($group_num * 50)) + 100 )) )) && exit 1 || echo "$GROUP_START $group_num"
    
}


gen_create() {
    local hostname opt
    old_group=$1
    new_group=$2

    get_free_ip=$(get_freeip) ||  error_exit "No more free network IP"
    get_free_ips=($get_free_ip)
    group_num=${get_free_ips[1]}
    GROUP_START=${get_free_ips[0]}
    

    GROUP_START_1=$(($(($GROUP_START/256))%256))
    GROUP_START_2=$(($GROUP_START%256))

    [ -d /install/groups ] || mkdir -p /install/groups
    lsdef -t osimage -z ${old_group} | sed "s/^[^ ]\+:/${new_group}:/" | mkdef -z
    
    mkdir -p /install/groups/${new_group}/env
    chdef -t osimage ${new_group} rootimgdir=/install/groups/${new_group}
    env_files=""
    for ii in $(lsdef -t osimage ${old_group} -i exlist,pkglist,otherpkglist,synclists,postscripts,postinstall,template | grep -v "^Object name:"); do
        src_file=$(echo $ii | awk -F= '{print $2}')
        src_type=$(echo $ii | awk -F= '{print $1}')
        env_files="$env_files ${src_type}="
        if [ -n "$src_file" ]; then
           multi_file=0
           for jj in $(echo $src_file | sed "s/,/ /g"); do
              if [ "$multi_file" == "0" ]; then
                 jj_real=$(_k_misc_get_realpath $jj)
                 if [ -n "$jj_real" -a -e "$jj_real" ]; then
                     if [ "$src_type" == "synclists" ]; then
                         if [ "$jj" == "$_KXC_HOME/share/hpc_syncfile" ]; then
                             env_files="${env_files}$jj"
                             synclist_chk=1
                         else
                             cp -a $(_k_misc_get_realpath $jj) /install/groups/$new_group/env/$(basename $jj) && ( [ "$synclist_chk" == "1" ] && env_files="${env_files},/install/groups/$new_group/env/$(basename $jj)" || env_files="${env_files}/install/groups/$new_group/env/$(basename $jj),${_KXC_HOME}/share/hpc_syncfile" )
                             multi_file=1
                         fi
                     else
                         synclist_chk=0
                         cp -a $(_k_misc_get_realpath $jj) /install/groups/$new_group/env/$(basename $jj) && env_files="${env_files}/install/groups/$new_group/env/$(basename $jj)"
                         multi_file=1
                         if [ "$src_type" == "pkglist" ]; then
                             grep "^#INCLUDE:$_KXC_HOME/share/hpc_pkglist#$" /install/groups/$new_group/env/$(basename $jj) >& /dev/null || echo "#INCLUDE:$_KXC_HOME/share/hpc_pkglist#" >> /install/groups/$new_group/env/$(basename $jj)
                             if [ -n "$pkglist_str" ]; then
                                  for ii in $(echo $pkglist_str | sed "s/,/ /g"); do
                                       grep "^#INCLUDE:${ii}#$" /install/groups/$new_group/env/$(basename $jj) >& /dev/null || \
                                          echo "#INCLUDE:${ii}#" >> /install/groups/$new_group/env/$(basename $jj)
                                  done
                             fi
                         fi
                     fi
                 else
                     echo "$jj not found"
                 fi
              else
                 if [ "$_KXC_HOME/share/hpc_syncfile" != "$jj" ]; then
                    jj_real=$(_k_misc_get_realpath $jj)
                    if [ -n "$jj_real" -a -e "$jj_real" ]; then
                       cp -a "$jj_real" /install/groups/$new_group/env/$(basename $jj) && env_files="${env_files},/install/groups/$new_group/env/$(basename $jj)"
                    else
                       echo "$jj not found"
                    fi
                 fi
              fi
           done
        else
           if [ "$src_type" == "synclists" ]; then
               env_files="${env_files}$_KXC_HOME/share/hpc_syncfile"
           fi
        fi
    done

    [ -n "$env_files" ] && chdef -t osimage ${new_group} $env_files

    GROUP_NETWORK_IP=$(echo $(_k_net_ip $GROUP_NETWORK $GROUP_NETMASK) | sed "s/ //g")
    if [ -n "$MPI_NETWORK" ]; then
       MPI_NETWORK_IP=$(echo $(_k_net_ip $MPI_NETWORK $GROUP_NETMASK) | sed "s/ //g")
       MPI_NETWORK_IP_STR="otherinterfaces=|${new_group}(sprintf('-%04d',\$1))-${MPI_DEV}:${MPI_NETWORK_IP}.(((\$1/256)%256)+$GROUP_START_1).((\$1%256)+$GROUP_START_2)|"
    fi
    #chdef -t group ${new_group} ip="|${GROUP_NETWORK_IP}.(((\$1/256)%256)+$GROUP_START_1).((\$1%256)+$GROUP_START_2)|"
    chdef -t group ${new_group} ip="|${GROUP_NETWORK_IP}.(((\$1/256)%256)+$GROUP_START_1).((\$1%256)+$GROUP_START_2)|" $MPI_NETWORK_IP_STR
    [ -d /global/kxcat_boot.d/${new_group} ] || mkdir -p /global/kxcat_boot.d/${new_group}
}

make() {
    local hostname opt
    opt=($*)
    if (( ${#opt[*]} != 2 )); then
         echo "${FUNCNAME} <group> <Image> [pkglist=<pkglist file1>,<pkglist file2>,....]"
#         echo "${FUNCNAME} <group> <Image>"
         echo
         echo "   get image names : scix images"
         exit
    fi

    group=$1
    [ "$group" == "n" ] && error_exit "not support group 'n'"
    shift 1
    image=$1
    shift 1
    for ii in $*; do
        pkglist_str=$(echo $ii | awk -F= '{if($1=="pkglist") print $2}')
        postinstall_str=$(echo $ii | awk -F= '{if($1=="postinstall") print $2}')
    done

    [ -n "$(echo "$group" | sed "s/[^0-9]*//g")" ] && error_exit "Group name not support digital number. Please remove any number in group name string"
    for ii in netboot; do
        [ "$group" == "$ii" ] && error_exit "xCAT not support $group name"
    done
    if ! lsdef -t osimage $image >& /dev/null; then
         echo "$image not found"
         exit
    fi
    if lsdef -t group $group >& /dev/null; then
         echo "Alread $group exist"
         exit
    fi
    if lsdef -t osimage $group >& /dev/null; then
         echo "Alread $group image exist"
         exit
    fi

    type=$(lsdef -t osimage ${image} -i provmethod | sed "s/ //g" | awk -F= '{if($1 == "provmethod") print $2}')
    gen_create "$image" "$group"  $@
    if [ "$type" == "netboot" ]; then
        genimage ${new_group}
        packimage ${new_group}
    elif [ "$type" == "statelite" ]; then
        echo
    fi
}

clone() {
    local hostname opt
    opt=($*)
    if (( ${#opt[*]} < 2 || ${#opt[*]} > 3 )); then
         echo "${FUNCNAME} <new group> <old group> [-b]"
         exit
    fi

    new_group=$1
    old_group=$2
    shift 2
    [ "$1" == "-b" ] && clone_boot_script=1

    if ! lsdef -t group $old_group >& /dev/null; then
         echo "Not found $old_group"
         exit
    fi
    if ! lsdef -t osimage $old_group >& /dev/null; then
         echo "Not found $old_group image"
         exit
    fi
    if lsdef -t group $new_group >& /dev/null; then
         echo "Alread $new_group exist"
         exit
    fi
    if lsdef -t osimage $new_group >& /dev/null; then
         echo "Alread $new_group image exist"
         exit
    fi
    [ "$new_group" == "n" ] && error_exit "not support group 'n'"
    if [ "$clone_boot_script" == "1" ]; then
       [ -d /global/kxcat_boot.d/${old_group} ] || error_exit "/global/kxcat_boot.d/${old_group} directory not found"
       [ -d /global/kxcat_boot.d/${new_group} ] && rm -fr /global/kxcat_boot.d/${new_group}
       cp -a /global/kxcat_boot.d/${old_group}  /global/kxcat_boot.d/${new_group}
    else
       [ -d /global/kxcat_boot.d/${new_group} ] || mkdir -p /global/kxcat_boot.d/${new_group}
    fi
    type=$(lsdef -t osimage ${old_group} -i provmethod | sed "s/ //g" | awk -F= '{if($1 == "provmethod") print $2}')
    if [ "$type" == "netboot" -o "$type" == "statelite" ]; then
        rootimg_dir=$(lsdef -t osimage ${old_group} -i rootimgdir | tail -n1 | sed -e "s/rootimgdir=//g" -e "s/ //g")
        if [ -n "$rootimg_dir" -a -d "$rootimg_dir" ]; then
            [ -d /install/group ] || mkdir -p /install/group
            cp -a ${rootimg_dir} /install/groups/$new_group || \
            error_exit "root image cloning fail"
        fi
    fi
    gen_create "$old_group" "$new_group"
    if [ "$type" == "netboot" ]; then
    #    genimage ${new_group}
        packimage ${new_group}
    elif [ "$type" == "statelite" ]; then
        echo
    fi
}
