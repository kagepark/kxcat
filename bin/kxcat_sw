#!/bin/bash
##########################################################
# Kage Park
# Wrapper script for xCAT
# Re-designed at 10/06/2017 by Kage Park
# Base design Using old libraries(07/2006) of Kage
# License : GPL
##########################################################
#
# Example CFG
# kxcat/etc/kxcat_sw.cfg
# ----------------------------
# smsw#:<IP1>
# <port#>:<N id#>
# ...
# sw#:<IP2>
# <port#>:<N id#>
# ...
# ----------------------------
# Switch Name Information)
# sw  : Normal Ethernet Switch
# smsw: Supermicro Ethernet Switch (Add for Supermicro switch type)
#
SMCMN=PUBLIC
CMN=public

error_exit() {
    echo $*
    exit 1
}

[ -f /etc/profile.d/kxcat.sh ] || error_exit "/etc/profile.d/kxcat.sh not found"
source /etc/profile.d/kxcat.sh
[ -f /etc/profile.d/xcat.sh ] || error_exit "/etc/profile.d/xcat.sh not found"
source /etc/profile.d/xcat.sh

sm_clean_port() {
   local sw_ip
   sw_ip=$1
   [ -n "$sw_ip" ] || return 1
   while read line; do
      unset port[$(echo $line | awk '{print $1}' | sed "s/.1.3.6.1.2.1.2.2.1.8.//g")]
   done < <(snmpwalk -O n -v2c -c $SMCMN $sw_ip .1.3.6.1.2.1.2.2.1.8 2>/dev/null | grep down)
}

sm_get_mac() {
   local sw_ip
   sw_ip=$1
   [ -n "$sw_ip" ] || return 1
   while read line; do
      ida=($(echo $line | awk '{print $1}' | sed "s/.1.0.8802.1.1.2.1.4.1.1.5.//g" | sed "s/\./ /g"))
      port[${ida[1]}]=$(echo $line | awk -F: '{print $2}' |sed -e "s/^ //g" -e "s/ /:/g" | tr '[:upper:]' '[:lower:]' )
   done < <(snmpwalk -O n -v2c -c $SMCMN $sw_ip .1.0.8802.1.1.2.1.4.1.1.5 2>/dev/null)
}

clean_port() {
   echo
}
get_mac() {
   echo
}

kxcat_ini() {
   kxcat=()
   while read x; do
      id=($x)
      [ "${#id[*]}" != "0" ] && kxcat[${id[1]}]="${id[0]},$(echo ${id[2]} | tr '[:upper:]' '[:lower:]')"
   done < <(echo $(lsdef -t node -i id,mac 2>/dev/null | sed -e "s/id=//g" -e "s/mac=//g" )| sed "s/Object name: /\n/g")
}

[ -d /var/run/kxcat ] || mkdir -p /var/run/kxcat
echo $$ > /var/run/kxcat/kxcat_sw.pid

while [ 1 ]; do
  if [ ! -f $_KXCAT_HOME/etc/kxcat_sw.cfg ]; then
      sleep 30
      continue
  fi
  kxcat_ini
  sw_chk=0
  udn=""
  for sw in $(cat $_KXCAT_HOME/etc/kxcat_sw.cfg | grep -v "^#"); do
    if echo $sw | grep "^smsw" >& /dev/null; then
       sw_ip=$(echo $sw | awk -F: '{print $2}')
       port=()
       sm_get_mac $sw_ip
       if [ ! -n "${port[*]}" ]; then
           sleep 30
           continue
       fi
       sm_clean_port $sw_ip 
       sw_chk=1
    elif echo $sw | grep "^sw" >& /dev/null; then
       sw_ip=$(echo $sw | awk -F: '{print $2}')
       port=()
       get_mac $sw_ip
       if [ ! -n "${port[*]}" ]; then
           sleep 30
           continue
       fi
       clean_port $sw_ip 
       sw_chk=1
    elif [ "$sw_chk" == "1" ]; then
       id=$(echo $sw|awk -F: '{print $1}')
       ids=$(echo $sw|awk -F: '{print $2}')
       nnm=$(echo ${kxcat[$ids]} | awk -F, '{print $2}')
       [ "${port[$id]}" == "$nnm" ] && continue
       nn=$(echo ${kxcat[$ids]} | awk -F, '{print $1}')
       [ -n "$nn" ] && chdef -t node -o $nn mac=${port[$id]} >& /dev/null
       #sed -i "/host $nn {/,/^}/d" /var/lib/dhcpd/dhcpd.leases
       makedhcp -d $nn
       makedhcp $nn
       (( $(stat -c %s /tmp/kxcat_sw.log) > $((10 * 1024 * 1024)) )) && mv /tmp/kxcat_sw.log.1
       echo "$(date +"%Y-%m-%d %H:%M:%S") : $nn : changed from $nnm to ${port[$id]}" >> /tmp/kxcat_sw.log
       for ((ii=1; ii<${#kxcat[*]}; ii++)); do
           if [ "$(echo ${kxcat[$ii]}|awk -F, '{print $2}')" == "$nnm" ]; then
               nnf=$(echo ${kxcat[$ii]} | awk -F, '{print $1}')
               makedhcp -d nnf
               makedhcp $nnf
               echo "$(date +"%Y-%m-%d %H:%M:%S") : $nn : fixed conflicted mac ($nnm)"
           fi
       done
    fi
  done
  sleep 40
done
