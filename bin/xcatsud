#!/usr/bin/python
import sqlite3
import os, signal
import sys
import socket
import time

state_db_file="/etc/xcat/nodelist.sqlite"
port=30010

def node_state(c,host=None,state=None):
   if host is None:
      return False

   sqr="select  status,statustime from nodelist where node='%s'" % host
   get_rc=c.execute(sqr).fetchone()
   if state is None:
      #Send back the status
      return get_rc[0]+"|"+get_rc[1]
   else:
      stime=time.strftime("%m-%d-%Y %H:%M:%S")
      if get_rc[0] == state:
         sqp="update nodelist set statustime='%s' where node='%s'" % (stime,host)
         c.execute(sqp)
      else:
         sqp="update nodelist set status='%s',statustime='%s' where node='%s'" % (state,stime,host)
         c.execute(sqp)
   return True


cmd=False
if len(sys.argv) == 2:
   cmd = sys.argv[1]

pidfile="/var/run/xcatsud.pid"
pid=False
if os.path.isfile(pidfile):
   pid=open(pidfile).readline().rstrip()

if cmd == "stop":
   if pid:
      os.kill(int(pid),signal.SIGKILL)
      os.remove(pidfile)
      #p.kill()
   sys.exit()
else:
   if pid:
      if os.path.isdir("/proc/%s" % pid):
         pname=open("/proc/%s/status" % pid).readline().rstrip()
         if pname.split("\t")[1] == "xcatsud":
            print("Alread running")
            sys.exit(0)

   if cmd == "status":
      print("xcatsud is not running")
      sys.exit()

   ppidfile = open(pidfile, "w")
   pid=os.getpid()
   ppidfile.write("%s\n" % pid)
   ppidfile.close()

try:
   serversocket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
except socket.error as err:
   print("socket creation failed with error %s" %(err))
   sys.exit

serversocket.bind((socket.gethostname(), port))
serversocket.listen(5)

if os.path.isfile(state_db_file):
   conn = sqlite3.connect(state_db_file)
   c = conn.cursor()
else:
   print("%s not found\n" % state_db_file)
   sys.exit

while True:

    #accept connections from outside
    (clientsocket, address) = serversocket.accept()
    host_info=clientsocket.recv(1024).split("|")
    if len(host_info) == 2:
       host_state=node_state(c,host_info[0],host_info[1])
    else:
       host_state=node_state(c,host_info[0])

    if not host_state is False and not host_state is True:
       clientsocket.send(host_state)
    elif host_state is True:
       clientsocket.send("ok")
       conn.commit()

    # Ehance to thread
    #ct = client_thread(clientsocket)
    #ct.run()
